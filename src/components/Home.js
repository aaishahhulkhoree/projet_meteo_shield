import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '../assets/styles/home.css';
import Weather from './Weather';
import Navbar from './Navbar';
import PrevisionMeteo from '../utils/PrevisionMeteo';
import SearchBar from '../components/SearchBar';

/**
 * Composant principal repr√©sentant la page d'accueil de l'application.
 * Il permet d'afficher la m√©t√©o d'une ville via une recherche ou la g√©olocalisation de l'utilisateur.
 */
const Home = () => {
  // √âtats pour stocker diff√©rentes donn√©es de l'application
  const [city, setCity] = useState('');
  const [preferredCities, setPreferredCities] = useState([]);
  const [temperature, setTemperature] = useState('');
  const [weather, setWeather] = useState('');
  const [humidity, setHumidity] = useState('');
  const [pressure, setPressure] = useState('');
  const [windSpeed, setWindSpeed] = useState('');
  const [geoLocationWeather, setGeoLocationWeather] = useState(null);
  const [alertMessage, setAlertMessage] = useState('');
  const [showAlert, setShowAlert] = useState(false);
  const navigate = useNavigate();

   /**
   * R√©cup√®re la liste des villes favorites de l'utilisateur connect√©
   */
  useEffect(() => {
    const fetchPreferredCities = async () => {
      const userId = localStorage.getItem('userId');
      if (!userId) {
        setPreferredCities([]); // Si pas connect√©, pas de villes favorites
        return;
      }

      try {
        const response = await fetch(`http://localhost:5000/api/villes-favorites/${userId}`);
        if (response.ok) {
          const data = await response.json();
          setPreferredCities(data.villes || []);
        } else {
          console.error('Erreur lors de la r√©cup√©ration des villes favorites.');
          setPreferredCities([]);
        }
      } catch (error) {
        console.error('Erreur r√©seau lors de la r√©cup√©ration des villes favorites :', error);
        setPreferredCities([]);
      }
    };

    fetchPreferredCities();
  }, []);

  /**
   * R√©cup√®re les donn√©es m√©t√©o via la g√©olocalisation de l'utilisateur
   * @param {float} lat - Latitude de l'utilisateur
   * @param {float} lon - Longitude de l'utilisateur
   */
  const fetchWeatherByGeoLocation = async (lat, lon) => {
    try {
      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=fr&appid=fd441e159a57c88c956ebf246cc1ae9c`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.cod !== 200) {
        alert('Impossible de r√©cup√©rer les donn√©es m√©t√©o.');
      } else {
        setGeoLocationWeather(data);
        checkWeatherAlerts(data);
      }
    } catch (error) {
      console.error('Erreur de r√©cup√©ration des donn√©es m√©t√©o :', error);
      alert('Erreur de r√©cup√©ration des donn√©es m√©t√©o.');
    }
  };

  /**
   * V√©rifie si la m√©t√©o actuelle n√©cessite une alerte.
   * @param {Object} data - Donn√©es m√©t√©o r√©cup√©r√©es
   */
  const checkWeatherAlerts = (data) => {
    const weatherCondition = data.weather[0].main;
    const cityName = data.name.split(' ')[0];
    let message = '';
  
    console.log(`M√©t√©o √† ${cityName}: ${weatherCondition}`);
    switch (weatherCondition) {
      case 'Thunderstorm':
        message = ` ‚ö†Ô∏è Alerte : üå© Orage violent en cours √† ${cityName}. Ne sortez pas !`;
        break;
      case 'Rain':
        message = ` ‚ö†Ô∏è Alerte : ‚òî Pluie √† ${cityName}. Si vous sortez, n'oubliez pas votre parapluie !`;
        break;
      case 'Snow':
        message = ` ‚ö†Ô∏è Alerte : üå®Ô∏è Chutes de neige √† ${cityName}. ‚õÑ Attention, au verglas et couvrez vous bien !`;
        break;
      case 'Mist':
      case 'Fog':
        message = ` ‚ö†Ô∏è Alerte : üå´ Brume ou üå´Ô∏è brouillard √† ${cityName}.`;
        break;
      case 'Drought':
        message = ` ‚ö†Ô∏è Alerte : üèúÔ∏è Secheresse √† ${cityName}. Pensez √† vous hydrater et √©vitez de sortir ! `;
        break;
      case 'Flood':
        message = ` ‚ö†Ô∏è Alerte : üí¶ Inondation √† ${cityName}. Mettez vous √† l'abri !`;
        break;
      case 'Tsunami':
        message = ` ‚ö†Ô∏è Alerte : üåä Tsunami √† ${cityName}. Ayeeeeeeeee ! c'est la fin `;
        break;
      default:
        message = `Aucune alerte d√©tect√©e √† ${cityName} ! Ouf, vous pouvez sortir !`;
    }
  
    setAlertMessage(message); 
    setShowAlert(message !== `Aucune alerte d√©tect√©e √† ${cityName} ! Ouf, vous pouvez sortir !`);
  };
  
 
  /**
   * Ferme l'alerte affich√©e
   */
  const closeAlert = () => {
    setShowAlert(false);
  };

  /**
   * Utilise la g√©olocalisation de l'utilisateur pour r√©cup√©rer la m√©t√©o actuelle
   */
  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        fetchWeatherByGeoLocation(latitude, longitude);
      },
      (err) => {
        console.error('Erreur de g√©olocalisation :', err);
        alert('Impossible de r√©cup√©rer votre position g√©ographique.');
      }
    );
  }, []);

  /**
   * G√®re la recherche d'une ville par l'utilisateur
   * @param {string} city - Nom de la ville recherch√©e
   */
  const handleSearch = async (city) => {
    if (!city) {
      alert('Veuillez entrer un nom de ville');
      return;
    }

    try {
      setCity(city);
      setAlertMessage('');
      navigate(`/${city}`);
    } catch (error) {
      console.error('Erreur lors de la mise √† jour des donn√©es m√©t√©o :', error);
      alert('Impossible de r√©cup√©rer les donn√©es m√©t√©o pour la ville recherch√©e.');
    }
  };

  /**
   * G√®re la s√©lection d'une ville favorite par l'utilisateur
   * @param {Event} event - √âv√©nement de s√©lection
   */
  const handleCitySelect = (event) => {
    const selectedCity = event.target.value;
    setCity(selectedCity);
    setAlertMessage('');
    navigate(`/${selectedCity}`);
  };

  /**
   * Met √† jour les donn√©es m√©t√©o lorsque la ville change
   */
  useEffect(() => {
    const observer = {
      mettreAJour: (data) => {
        if (data) {
          const today = data.list[0];
          setTemperature(`${today.main.temp}¬∞C`);
          setWeather(today.weather[0].description);
          setHumidity(`${today.main.humidity}%`);
          setPressure(`${today.main.pressure} hPa`);
          setWindSpeed(`${today.wind.speed} m/s`);
          setCity(today.name);
          setAlertMessage('');
        }
      },
    };

    PrevisionMeteo.ajouterObserver(observer);

    return () => {
      PrevisionMeteo.retirerObserver(observer);
    };
  }, []);

  // V√©rification des alertes suppl√©mentaires pour la g√©olocalisation
  useEffect(() => {
    if (geoLocationWeather) {
      const weatherCondition = geoLocationWeather.weather[0].main;
      if (
        weatherCondition === 'Thunderstorm' || //orage 
        weatherCondition === 'Rain' || // pluie 
        weatherCondition === 'Snow' || //neige
        weatherCondition === 'Mist' || //brume
        weatherCondition === 'Fog'  || //brouillard
        weatherCondition === 'Drought' || //secheresse 
        weatherCondition === 'Flood' || //inondation
        weatherCondition === 'Tsunami' || //tsunami
        weatherCondition === 'Storm' || //temp√™te 
        weatherCondition === 'Clear' //

      ) {
        setShowAlert(true); // Afficher l'alerte m√©t√©o
      } else {
        setShowAlert(false); // Alerte masqu√©e si pas d'√©v√©nement m√©t√©o

      }
    }
  }, [geoLocationWeather]);

  return (
    <div className="home-container">
      <Navbar />
      <SearchBar onSearch={handleSearch} />
      {preferredCities.length > 0 && (
        <div className="preferred-cities-container">
          <label htmlFor="preferred-cities-select">S√©lectionnez une ville :</label>
          <select
            id="preferred-cities-select"
            onChange={handleCitySelect}
            value={city}
          >
            <option value="">--Choisissez une ville--</option>
            {preferredCities.map((citySelect, index) => (
              <option key={index} value={citySelect}>
                {citySelect}
              </option>
            ))}
          </select>
        </div>
      )}
      {showAlert && alertMessage && (
        <div className="alert-container">
          <div className="alert-message">
            {alertMessage}
            <button className="close-alert-btn" onClick={closeAlert}>‚úñ</button>
          </div>
        </div>
      )}
      <Weather
        city={city}
        temperature={temperature}
        weather={weather}
        humidity={humidity}
        pressure={pressure}
        windSpeed={windSpeed}
      />
    </div>
  );
};

export default Home;
