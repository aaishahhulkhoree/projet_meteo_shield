import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import '../assets/styles/weather.css';
import StormAlert from './StormAlert';
import TemperatureAlert from './TemperatureAlert';
import PrecipitationAlert from './PrecipitationAlert';
import DroughtAlert from './DroughtAlert';
import TsunamiAlert from './TsunamiAlert';
import EarthquakeAlert from './EarthquakeAlert';
import WindSpeedInfo from './WindSpeedInfo';
import PressureInfo from './PressureInfo';
import HumidityInfo from './HumidityInfo';
import '@fortawesome/fontawesome-free/css/all.min.css';

const Weather = ({ city }) => {
  const [forecast, setForecast] = useState(null); // Pr√©visions m√©t√©o
  const [error, setError] = useState(''); // Message d'erreur
  const [earthquakeData, setEarthquakeData] = useState(null); // Donn√©es des alertes s√©ismes
  const [tsunamiWarning, setTsunamiWarning] = useState(false); // Alerte tsunami

  // Simulation de donn√©es pour tester l'alerte s√©cheresse
  const testData = {
    main: {
      temp: 35,  // Temp√©rature √©lev√©e
      humidity: 25, // Faible humidit√©
    },
    weather: [{ description: 'clear sky', icon: '01d' }],
    wind: { speed: 5 },
    rain: { '1h': 0 }, // Aucune pr√©cipitation
  };

  //Simulation de donn√©es pour tester l'alerte precipitation
  const rain = {
    '1h': 110,
  }

  //Simulation de donn√©es pour tester l'alerte tempete/storm
  const windSpeed = 75; // Mets cette valeur pour tester diff√©rentes alertes
  const forecastWindSpeed = 60; // Mets cette valeur pour tester les pr√©visions

  const [temperatureUnit, setTemperatureUnit] = useState('C'); // Unit√© de temp√©rature par d√©faut (Celsius)

  // Fonction pour traduire les descriptions de la m√©t√©o (de l'anglais vers le fran√ßais)
  // Entr√©e: detail (cha√Æne de caract√®res repr√©sentant la description de la m√©t√©o)
  // Sortie: traduction de la description (cha√Æne de caract√®res)
  // Description: Cette fonction permet de traduire les descriptions m√©t√©orologiques de l'API OpenWeatherMap en fran√ßais
  const translatedetail = (detail) => {
    const translations = {
      'clear sky': 'Ciel d√©gag√©',
      'few clouds': 'Quelques nuages',
      'scattered clouds': 'Nuages √©pars',
      'broken clouds': 'Nuages fragment√©s',
      'shower rain': 'Averses',
      'rain': 'Pluie',
      'thunderstorm': 'Orage',
      'snow': 'Neige',
      'mist': 'Brume',
    };
    return translations[detail] || detail; // Retourne la traduction si trouv√©e, sinon la description originale
  };

  // Effet pour r√©cup√©rer les pr√©f√©rences de l'utilisateur (unit√© de temp√©rature)
  // Entr√©e: Aucune (les pr√©f√©rences sont r√©cup√©r√©es via l'ID utilisateur dans le stockage local)
  // Sortie: Modifie l'√©tat temperatureUnit avec l'unit√© de temp√©rature de l'utilisateur
  // Description: Cette fonction permet de r√©cup√©rer l'unit√© de temp√©rature pr√©f√©r√©e de l'utilisateur depuis une API ou le stockage local
  useEffect(() => {
    const fetchUserPreferences = async () => {
      const userId = localStorage.getItem('userId');
      if (userId) {
        try {
          const response = await fetch(`http://localhost:5000/api/preferences-utilisateur/${userId}`);
          const data = await response.json();
          if (data && data.temperature_unit) {
            setTemperatureUnit(data.temperature_unit); // Met √† jour l'unit√© de temp√©rature en fonction des pr√©f√©rences de l'utilisateur
          }
        } catch (error) {
          console.error('Erreur lors de la r√©cup√©ration des pr√©f√©rences utilisateur :', error);
        }
      } else {
        const localUnit = localStorage.getItem('temperatureUnit');
        setTemperatureUnit(localUnit || 'C'); // Si l'utilisateur n'est pas connect√©, utilise les pr√©f√©rences locales
      }
    };

    fetchUserPreferences();
  }, []); // Le hook ne se lance qu'une seule fois √† l'initialisation du composant

  // Effet pour r√©cup√©rer les donn√©es m√©t√©o de l'API OpenWeatherMap
  // Entr√©e: city (nom de la ville dont on veut obtenir les pr√©visions)
  // Sortie: Met √† jour l'√©tat 'forecast' avec les donn√©es m√©t√©o ou affiche une erreur
  // Description: Cette fonction effectue une requ√™te √† l'API OpenWeatherMap pour r√©cup√©rer les donn√©es m√©t√©o en fonction de la ville
  useEffect(() => {
    const fetchWeatherData = async () => {
      if (!city) return; // Si aucune ville n'est fournie, on ne fait pas de requ√™te

      try {
        const units = temperatureUnit === 'C' ? 'metric' : 'imperial'; // Choisit les unit√©s en fonction de l'unit√© de temp√©rature
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=${units}&lang=fr&appid=fd441e159a57c88c956ebf246cc1ae9c`
        );
        const data = await response.json();
        if (data.cod !== 200) {
          setError('Ville non trouv√©e ou donn√©es m√©t√©o indisponibles.'); // En cas d'erreur dans les donn√©es retourn√©es
          setForecast(null);
        } else {
          setError('');
          setForecast(data); // Met √† jour l'√©tat avec les donn√©es m√©t√©o r√©cup√©r√©es
          // Simuler des alertes (s√©isme, tsunami, etc.)
          setTsunamiWarning(true); // Simule une alerte tsunami pour le test
        }
      } catch (err) {
        setError('Une erreur est survenue lors de la r√©cup√©ration des donn√©es m√©t√©o.'); // Erreur lors de la requ√™te
      }
    };

    fetchWeatherData();
  }, [city, temperatureUnit]); // Ce hook se d√©clenche lorsque la ville ou l'unit√© de temp√©rature change

  // Si aucune donn√©e m√©t√©o n'est disponible, affiche un message d'erreur ou de chargement
  if (!forecast) {
    return (
      <>
        {error ? <p>{error}</p> : <h4>Chargement des donn√©es m√©t√©o...</h4>}
      </>
    );
  }

  // R√©cup√®re l'ic√¥ne m√©t√©o depuis l'API
  const weatherIcon = `http://openweathermap.org/img/wn/${forecast.weather[0].icon}.png`;

  // R√©cup√®re la temp√©rature actuelle
  let temperature = forecast.main.temp;

  return (
    <div className="weather-container">
      <h2>M√©t√©o pour {city}</h2>
      <div className='temperature'>
        <p>üå°Ô∏è Temp√©rature : {Math.round(temperature)}¬∞{temperatureUnit}</p>
      </div>

      <div className='detail'>
        <p>üîç D√©tail : {translatedetail(forecast.weather[0]?.description)}</p>
        <p><img src={weatherIcon} alt="M√©t√©o" className='icon-weather' /></p>
      </div>

      {/* Informations sur la pression, humidit√©, vitesse du vent, etc. */}
      <PressureInfo pressure={forecast.main.pressure} />
      <HumidityInfo humidity={forecast.main.humidity} />
      <WindSpeedInfo windSpeed={forecast.wind.speed} />
      <StormAlert windSpeed={forecast.wind.speed} />
      <TemperatureAlert temp={temperature} />
      <PrecipitationAlert rain={forecast.rain} />
      <DroughtAlert rain={forecast.rain || { '1h': 0 }} humidity={forecast.main.humidity} temp={forecast.main.temp} />
      <TsunamiAlert tsunamiWarning={tsunamiWarning} />
      <EarthquakeAlert earthquakeData={earthquakeData} />
    </div>
  );
};

// Validation des props du composant
Weather.propTypes = {
  city: PropTypes.string.isRequired, // La ville est une prop obligatoire
};

export default Weather;
